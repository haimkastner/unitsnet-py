from enum import Enum
import math

from ..abstract_unit import AbstractMeasure


{% if unit %}
class {{ unit }}Units(Enum):
        """
            {{ unit }}Units enumeration
        """
        {% for method in methods %}
        {{ method.unit }} = '{{ method.unit }}'
        """
            {{ method.description }}
        """
        {% endfor %}

class {{ unit }}Dto:
    """
    A DTO representation of a {{ unit }}

    Attributes:
        value (float): The value of the {{ unit }}.
        unit ({{ unit }}Units): The specific unit that the {{ unit }} value is representing.
    """

    def __init__(self, value: float, unit: {{ unit }}Units):
        """
        Create a new DTO representation of a {{ unit }}

        Parameters:
            value (float): The value of the {{ unit }}.
            unit ({{ unit }}Units): The specific unit that the {{ unit }} value is representing.
        """
        self.value: float = value
        """
        The value of the {{ unit }}
        """
        self.unit: {{ unit }}Units = unit
        """
        The specific unit that the {{ unit }} value is representing
        """

    def to_json(self):
        """
        Get a {{ unit }} DTO JSON object representing the current unit.

        :return: JSON object represents {{ unit }} DTO.
        :rtype: dict
        :example return: {"value": 100, "unit": "{{ base_unit }}"}
        """
        return {"value": self.value, "unit": self.unit.value}

    @staticmethod
    def from_json(data):
        """
        Obtain a new instance of {{ unit }} DTO from a json representation.

        :param data: The {{ unit }} DTO in JSON representation.
        :type data: dict
        :example data: {"value": 100, "unit": "{{ base_unit }}"}
        :return: A new instance of {{ unit }}Dto.
        :rtype: {{ unit }}Dto
        """
        return {{ unit }}Dto(value=data["value"], unit={{ unit }}Units(data["unit"]))

{% endif %}
class {{ unit }}(AbstractMeasure):
    """
    {{ description }}

    Args:
        value (float): The value.
        from_unit ({{ unit }}Units): The {{ unit }} unit to create from, The default unit is {{ base_unit }}
    """
    def __init__(self, value: float, from_unit: {{ unit }}Units = {{ unit }}Units.{{ base_unit }}):
        # Do not validate type, to allow working with numpay arrays and similar objects who supports all arithmetic 
        # operations, but they are not a number, see #14 
        # if math.isnan(value):
        #     raise ValueError('Invalid unit: value is NaN')
        self._value = self.__convert_to_base(value, from_unit)
        {% for method in methods %}
        self.__{{ method.name }} = None
        {% endfor %}

    def convert(self, unit: {{ unit }}Units) -> float:
        return self.__convert_from_base(unit)

    def to_dto(self, hold_in_unit: {{ unit }}Units = {{ unit }}Units.{{ base_unit }}) -> {{ unit }}Dto:
        """
        Get a new instance of {{ unit }} DTO representing the current unit.

        :param hold_in_unit: The specific {{ unit }} unit to store the {{ unit }} value in the DTO representation.
        :type hold_in_unit: {{ unit }}Units
        :return: A new instance of {{ unit }}Dto.
        :rtype: {{ unit }}Dto
        """
        return {{ unit }}Dto(value=self.convert(hold_in_unit), unit=hold_in_unit)
    
    def to_dto_json(self, hold_in_unit: {{ unit }}Units = {{ unit }}Units.{{ base_unit }}):
        """
        Get a {{ unit }} DTO JSON object representing the current unit.

        :param hold_in_unit: The specific {{ unit }} unit to store the {{ unit }} value in the DTO representation.
        :type hold_in_unit: {{ unit }}Units
        :return: JSON object represents {{ unit }} DTO.
        :rtype: dict
        :example return: {"value": 100, "unit": "{{ base_unit }}"}
        """
        return self.to_dto(hold_in_unit).to_json()

    @staticmethod
    def from_dto({{ unit_camel_case }}_dto: {{ unit }}Dto):
        """
        Obtain a new instance of {{ unit }} from a DTO unit object.

        :param {{ unit_camel_case }}_dto: The {{ unit }} DTO representation.
        :type {{ unit_camel_case }}_dto: {{ unit }}Dto
        :return: A new instance of {{ unit }}.
        :rtype: {{ unit }}
        """
        return {{ unit }}({{ unit_camel_case }}_dto.value, {{ unit_camel_case }}_dto.unit)

    @staticmethod
    def from_dto_json(data: dict):
        """
        Obtain a new instance of {{ unit }} from a DTO unit json representation.

        :param data: The {{ unit }} DTO in JSON representation.
        :type data: dict
        :example data: {"value": 100, "unit": "{{ base_unit }}"}
        :return: A new instance of {{ unit }}.
        :rtype: {{ unit }}
        """
        return {{ unit }}.from_dto({{ unit }}Dto.from_json(data))

    def __convert_from_base(self, from_unit: {{ unit }}Units) -> float:
        value = self._value
        {% for method in methods %}
        if from_unit == {{ unit }}Units.{{ method.unit }}:
            return {{ method.formula_from_base }}
        {% endfor %}
        return None


    def __convert_to_base(self, value: float, to_unit: {{ unit }}Units) -> float:
        {% for method in methods %}
        if to_unit == {{ unit }}Units.{{ method.unit }}:
            return {{ method.formula_to_base }}
        {% endfor %}
        return None


    @property
    def base_value(self) -> float:
        return self._value

    {% for method in methods %}
    @staticmethod
    def from_{{ method.name }}({{ method.name }}: float):
        """
        Create a new instance of {{ unit }} from a value in {{ method.name }}.

        {{ method.description }}

        :param meters: The {{ unit }} value in {{ method.name }}.
        :type {{ method.name }}: float
        :return: A new instance of {{ unit }}.
        :rtype: {{ unit }}
        """
        return {{ unit }}({{ method.name }}, {{ unit }}Units.{{ method.unit }})

    {% endfor %}{% for method in methods %}
    @property
    def {{ method.name }}(self) -> float:
        """
        {{ method.description }}
        """
        if self.__{{ method.name }} != None:
            return self.__{{ method.name }}
        self.__{{ method.name }} = self.__convert_from_base({{ unit }}Units.{{ method.unit }})
        return self.__{{ method.name }}

    {% endfor %}
    def to_string(self, unit: {{ unit }}Units = {{ unit }}Units.{{ base_unit }}, fractional_digits: int = None) -> str:
        """
        Format the {{ unit }} to a string.
        
        Note: the default format for {{ unit }} is {{ base_unit }}.
        To specify the unit format, set the 'unit' parameter.
        
        Args:
            unit (str): The unit to format the {{ unit }}. Default is '{{ base_unit }}'.
            fractional_digits (int, optional): The number of fractional digits to keep.

        Returns:
            str: The string format of the Angle.
        """
        {% for method in methods %}
        if unit == {{ unit }}Units.{{ method.unit }}:
            return f"""{super()._truncate_fraction_digits(self.{{ method.name }}, fractional_digits)} {{ method.abbreviation }}"""
        {% endfor %}
        return f'{self._value}'


    def get_unit_abbreviation(self, unit_abbreviation: {{ unit }}Units = {{ unit }}Units.{{ base_unit }}) -> str:
        """
        Get {{ unit }} unit abbreviation.
        Note! the default abbreviation for {{ unit }} is {{ base_unit }}.
        To specify the unit abbreviation set the 'unit_abbreviation' parameter.
        """
        {% for method in methods %}
        if unit_abbreviation == {{ unit }}Units.{{ method.unit }}:
            return """{{ method.abbreviation }}"""
        {% endfor %}
